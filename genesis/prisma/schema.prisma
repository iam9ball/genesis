// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Previous generator and datasource blocks remain the same...

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  studio        Media?
  firstname     String?
  lastname      String?
  image         String?
  trial         Boolean        @default(false)
  clerkid       String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  mediaId       String?        @db.ObjectId
  workspace     WorkSpace[]
  videos        Video[]
  subscription  Subscription?  // Changed from subscriptions to subscription (singular)
  members       Member[]
  notification  Notification[]
  sender        Invite[]       @relation("sender")
  receiver      Invite[]       @relation("receiver")
}

model Subscription {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  user       User             @relation(fields: [userId], references: [id])  // Made relation required
  userId     String           @unique @db.ObjectId  // Made field required and added @unique
  createdAt  DateTime         @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime         @updatedAt  // Changed to @updatedAt
  customerId String?          @unique
}

// Rest of the models remain the same...
model Media {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId  // Changed to MongoDB ObjectId
  screen String?
  mic    String?
  camera String?
  preset PRESET  @default(SD)
  user   User?   @relation(fields: [userId], references: [id])
  userId String  @unique @db.ObjectId  // Changed from UUID to ObjectId
}

model WorkSpace {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId  // Changed to MongoDB ObjectId
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  type      Type
  userId    String?  @db.ObjectId  // Changed from UUID to ObjectId
  createdAt DateTime @default(now())
  folders   Folder[]
  videos    Video[]
  members   Member[]
  invite    Invite[]
}

model Folder {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId  // Changed to MongoDB ObjectId
  name        String     @default("Untitled Folder")
  createdAt   DateTime   @default(now())
  workspace   WorkSpace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?    @db.ObjectId  // Changed from UUID to ObjectId
  videos      Video[]
}

model Video {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId  // Changed to MongoDB ObjectId
  title       String?    @default("Untitled Video")
  description String?    @default("No Description")
  source      String     @unique
  createdAt   DateTime   @default(now())
  folder      Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?    @db.ObjectId  // Changed from UUID to ObjectId
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    @db.ObjectId  // Changed from UUID to ObjectId
  processing  Boolean    @default(true)
  workspace   WorkSpace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String?    @db.ObjectId  // Changed from UUID to ObjectId
  views       Int        @default(0)
  summary     String?
}

model Member {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId  // Changed to MongoDB ObjectId
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?    @db.ObjectId  // Changed from UUID to ObjectId
  createdAt   DateTime   @default(now())
  member      Boolean    @default(true)
  workspace   WorkSpace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?    @db.ObjectId  // Changed from UUID to ObjectId
}

model Notification {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId  // Changed to MongoDB ObjectId
  user    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId  // Changed from UUID to ObjectId
  content String
}

model Invite {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId  // Changed to MongoDB ObjectId
  sender      User?      @relation("sender", fields: [senderId], references: [id])
  senderId    String?    @db.ObjectId  // Changed from UUID to ObjectId
  receiver    User?      @relation("receiver", fields: [receiverId], references: [id])
  receiverId  String?    @db.ObjectId  // Changed from UUID to ObjectId
  content     String
  workspace   WorkSpace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?    @db.ObjectId  // Changed from UUID to ObjectId
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum Type {
  PERSONAL
  PUBLIC
}

enum PRESET {
  HD
  SD
}